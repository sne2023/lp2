--------------------------------------------------------------------C code --------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main(void)
{
int i,j,k,l;
char a[20],c[20],d[20];
printf("\n\t\tRAILFENCETECHNIQUE");
printf("\n\nEnter the input string: ");
gets(a);
l=strlen(a);
/*ciphering*/
for(i=0,j=0;i<l;i++)
{
if(i%2==0)c[j++]=a[i];
}
for(i=0;i<l;i++)
{
if(i%2==1)c[j++]=a[i];
}
c[j]='\0';
printf("\nCiphertestafterapplyingrailfence: ");
printf("\n%s",c);
/*deciphering*/
if(l%2==0)
k=l/2;
else
k=(l/2)+1;
for(i=0,j=0;i<k;i++)
{
d[j]=c[i];j=j+2;
}
for(i=k,j=1;i<l;i++)
{
d[j]=c[i];
j=j+2;
}
d[l]='\0';
printf("\nTextafterdecryption: ");
printf("%s",d);
}
------------------------------------------------------------------------python----------------------------------------------------------------------

import math 
  
key = "SAOE"

def encryptMessage(msg): 
    cipher = "" 
    k_indx = 0
    msg_len = float(len(msg)) 
    msg_lst = list(msg) 
    key_lst = sorted(list(key)) 
  
    col = len(key) 
    row = int(math.ceil(msg_len / col)) 
  
    fill_null = int((row * col) - msg_len) 
    msg_lst.extend('_' * fill_null) 

    matrix = [msg_lst[i: i + col]  
              for i in range(0, len(msg_lst), col)] 
  
    for _ in range(col): 
        curr_idx = key.index(key_lst[k_indx]) 
        cipher += ''.join([row[curr_idx]  for row in matrix]) 
        k_indx += 1
    return cipher 
 
def decryptMessage(cipher): 
    msg = "" 
    k_indx = 0

    msg_indx = 0
    msg_len = float(len(cipher)) 
    msg_lst = list(cipher) 
  
    col = len(key) 
      
    row = int(math.ceil(msg_len / col)) 
  
    key_lst = sorted(list(key)) 
  
    dec_cipher = [] 
    for _ in range(row): 
        dec_cipher += [[None] * col] 
  
    for _ in range(col): 
        curr_idx = key.index(key_lst[k_indx]) 
  
        for j in range(row): 
            dec_cipher[j][curr_idx] = msg_lst[msg_indx] 
            msg_indx += 1
        k_indx += 1
  
    try: 
        msg = ''.join(sum(dec_cipher, [])) 
    except TypeError: 
        raise TypeError("This program cannot handle repeating words.") 
  
    null_count = msg.count('_') 
  
    if null_count > 0: 
        return msg[: -null_count] 
  
    return msg 

msg = input("Enter String: ")
cipher = encryptMessage(msg) 
print("Encrypted Message: {}".format(cipher))  
print("Decrypted Message: {}".format(decryptMessage(cipher)))
